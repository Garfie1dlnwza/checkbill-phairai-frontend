"use client";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";

type Item = {
  id: number;
  name: string;
  price: number;
  qty: number;
  shareWith: string[];
};

const STORAGE_KEY = process.env.NEXT_PUBLIC_STORAGE_KEY;
const DIVIDER_KEY = process.env.NEXT_PUBLIC_DIVIDER_KEY;

export default function SummaryPage() {
  const [items, setItems] = useState<Item[]>([]);
  const [persons, setPersons] = useState<string[]>([]);
  const [personAmounts, setPersonAmounts] = useState<Record<string, number>>(
    {}
  );
  const [totalBill, setTotalBill] = useState<number>(0);

  useEffect(() => {
    const itemsRaw = STORAGE_KEY ? localStorage.getItem(STORAGE_KEY) : null;
    const dividerRaw = DIVIDER_KEY ? localStorage.getItem(DIVIDER_KEY) : null;
    if (itemsRaw) setItems(JSON.parse(itemsRaw));
    if (dividerRaw) setPersons(JSON.parse(dividerRaw));
  }, []);

  useEffect(() => {
    const amounts: Record<string, number> = {};
    persons.forEach((p) => (amounts[p] = 0));
    let calculatedTotal = 0;

    items.forEach((item) => {
      const itemTotal = item.price * item.qty;
      calculatedTotal += itemTotal;
      if (item.shareWith.length > 0) {
        const share = itemTotal / item.shareWith.length;
        item.shareWith.forEach((p) => {
          if (amounts[p] !== undefined) amounts[p] += share;
        });
      }
    });

    setPersonAmounts(amounts);
    setTotalBill(calculatedTotal);
  }, [items, persons]);

  const currentDate = new Date().toLocaleDateString("th-TH", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  });

  // Animation variants
  const receiptVariants = {
    hidden: { opacity: 0, y: -40, scaleY: 0.7 },
    visible: {
      opacity: 1,
      y: 0,
      scaleY: 1,
      transition: {
        type: "spring",
        bounce: 0.2,
        duration: 0.8,
      },
    },
  };

  const sectionVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: { delay: 0.3 + i * 0.15, duration: 0.5 },
    }),
  };

  return (
    <div className="min-h-screen flex justify-center items-start py-8 px-4 text-gray-700 ">
      <motion.div
        className="w-full max-w-sm bg-white shadow-2xl relative"
        initial="hidden"
        animate="visible"
      >
        {/* Perforated Top Edge */}
        <div className="h-4 bg-white relative overflow-hidden">
          <div
            className="absolute top-0 left-0 w-full h-4 bg-gray-100"
            style={{
              backgroundImage: `repeating-linear-gradient(90deg, transparent, transparent 8px, white 8px, white 12px)`,
            }}
          ></div>
        </div>

        <div className="px-6 pb-6 font-mono text-sm bg-white">
          {/* Header */}
          <motion.div
            className="text-center py-4 border-b border-dashed border-gray-400 text-gray-700"
            variants={sectionVariants}
            initial="hidden"
            animate="visible"
            custom={0}
          >
            <h1 className="text-lg font-bold mb-1">ใบเสร็จรับเงิน</h1>
            <h2 className="text-base font-semibold">RECEIPT</h2>
            <p className="text-xs text-gray-600 mt-2">{currentDate}</p>
          </motion.div>

          {/* Items */}
          <motion.div
            className="py-4 space-y-2"
            variants={sectionVariants}
            initial="hidden"
            animate="visible"
            custom={1}
          >
            {items.map((item, index) => (
              <motion.div
                key={item.id}
                variants={sectionVariants}
                initial="hidden"
                animate="visible"
                custom={2 + index}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="font-semibold">{item.name}</div>
                    <div className="text-xs text-gray-600">
                      {item.qty} x ฿{item.price.toLocaleString()}
                    </div>
                    {item.shareWith.length > 0 && (
                      <div className="text-xs text-gray-500 mt-1">
                        หาร: {item.shareWith.join(", ")}
                      </div>
                    )}
                  </div>
                  <div className="font-bold text-right ml-4">
                    ฿{(item.price * item.qty).toLocaleString()}
                  </div>
                </div>
                {index < items.length - 1 && (
                  <div className="border-b border-dotted border-gray-300 mt-2"></div>
                )}
              </motion.div>
            ))}
          </motion.div>

          {/* Total */}
          <motion.div
            className="border-t border-dashed border-gray-400 pt-3"
            variants={sectionVariants}
            initial="hidden"
            animate="visible"
            custom={items.length + 2}
          >
            <div className="flex justify-between text-base font-bold">
              <span>TOTAL</span>
              <span>฿{totalBill.toLocaleString()}</span>
            </div>
          </motion.div>

          {/* Divider */}
          <motion.div
            className="border-t border-dashed border-gray-400 mt-6 pt-4"
            variants={sectionVariants}
            initial="hidden"
            animate="visible"
            custom={items.length + 3}
          >
            <h3 className="text-center font-bold mb-3">ยอดแยกตามคน</h3>
            <div className="space-y-2">
              {persons.map((name, i) => (
                <motion.div
                  key={name}
                  className="flex justify-between"
                  variants={sectionVariants}
                  initial="hidden"
                  animate="visible"
                  custom={items.length + 4 + i}
                >
                  <span>{name}</span>
                  <span className="font-semibold">
                    ฿{personAmounts[name]?.toFixed(2) || "0.00"}
                  </span>
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Footer */}
          <motion.div
            className="text-center text-xs text-gray-500 mt-6 pt-4 border-t border-dotted border-gray-300"
            variants={sectionVariants}
            initial="hidden"
            animate="visible"
            custom={items.length + persons.length + 5}
          >
            <p>ขอบคุณที่ใช้บริการ</p>
            <p>THANK YOU</p>
          </motion.div>
        </div>

        {/* Perforated Bottom Edge */}
        <div className="h-4 bg-white relative overflow-hidden">
          <div
            className="absolute bottom-0 left-0 w-full h-4 bg-gray-100"
            style={{
              backgroundImage: `repeating-linear-gradient(90deg, transparent, transparent 8px, white 8px, white 12px)`,
            }}
          ></div>
        </div>
      </motion.div>
    </div>
  );
}
